---

# ðŸ“˜ Hash Tables (Notes)

## ðŸ”¹ What is a Hash Table?

* A **Hash Table** is a data structure that stores data in **keyâ€“value pairs**.
* It uses a **hash function** to compute an index (called a hash code) into an array of buckets, from which the desired value can be found.
* Provides **fast access, insertion, and deletion** (on average **O(1)** time complexity).

---

## ðŸ”¹ Key Terminologies

1. **Key** â†’ Identifier used to store and retrieve values (e.g., "student\_id").
2. **Value** â†’ Data associated with the key (e.g., "Krishna").
3. **Hash Function** â†’ A function that converts a key into a valid index in the underlying array.

   * Example: `index = hash(key) % size_of_table`
4. **Buckets** â†’ Slots/positions in the array where values are stored.

---

## ðŸ”¹ Working of Hash Table

1. Input a **key**.
2. Apply the **hash function** to compute the index.
3. Store the **keyâ€“value pair** at that index in the array.
4. To retrieve, reapply the hash function to find the index and get the value.

---

## ðŸ”¹ Collision Handling

A **collision** happens when two different keys map to the same index.
Common strategies to handle collisions:

1. **Chaining** â†’ Each bucket holds a linked list (or dynamic structure) of keyâ€“value pairs.
2. **Open Addressing** â†’ Find the next empty slot in the array (using techniques like linear probing, quadratic probing, or double hashing).

---

## ðŸ”¹ Advantages

* Fast lookups, insertions, and deletions (average **O(1)**).
* Efficient for large datasets where quick access is needed.

---

## ðŸ”¹ Disadvantages

* Collisions can degrade performance (in worst case, **O(n)**).
* Requires a good hash function to minimize collisions.
* Fixed-size arrays may need resizing (rehashing).

---

## ðŸ”¹ Applications

* **Databases** â†’ Indexing data using keys.
* **Compilers** â†’ Symbol tables for variables and functions.
* **Caching** â†’ Store frequently used data for quick retrieval.
* **Sets & Maps** â†’ Implementations of associative arrays, dictionaries, etc.

---


