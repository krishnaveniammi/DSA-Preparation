---

# ðŸ“˜ Stack Data Structure â€“ Notes

## ðŸ”¹ What is a Stack?

* A **Stack** is a linear data structure that follows the **LIFO (Last In, First Out)** principle.
* This means the last element inserted is the first one to be removed.
* Example: Think of a stack of plates â€“ you add and remove only from the top.

---

## ðŸ”¹ Characteristics of Stack

* **Linear data structure** â†’ elements arranged sequentially.
* **Access is restricted** â†’ insertion and deletion allowed only at one end (called **Top**).
* **Order of processing** â†’ Last In, First Out (LIFO).

---

## ðŸ”¹ Operations on Stack

1. **Push(x)** â†’ Insert an element `x` into the stack (on the top).
2. **Pop()** â†’ Remove the top element from the stack.
3. **Peek() / Top()** â†’ Retrieve the top element without removing it.
4. **isEmpty()** â†’ Check if the stack has no elements.
5. **Size()** â†’ Get the total number of elements in the stack.

---

## ðŸ”¹ Stack Terminologies

* **Top** â†’ Pointer/reference to the most recent element inserted.
* **Overflow** â†’ Error when trying to push into a full stack (in fixed-size implementation).
* **Underflow** â†’ Error when trying to pop from an empty stack.

---

## ðŸ”¹ Real-World Applications of Stack

* **Undo/Redo functionality** in editors
* **Browser history** (Back and Forward navigation)
* **Recursive function calls** (system call stack)
* **Expression evaluation** (postfix, prefix, infix conversion)
* **Balancing symbols** like parentheses checking

---

## ðŸ”¹ Advantages

* Easy to implement.
* Provides efficient memory management for function calls.

---

## ðŸ”¹ Limitations

* Fixed size in array-based stacks may lead to overflow.
* Access is limited (cannot directly access elements in the middle).

---

ðŸ“Œ **Summary:**
A Stack is a simple yet powerful data structure that organizes data using the **LIFO principle**, allowing operations only at the **Top** of the stack. It is widely used in compilers, operating systems, and problem-solving.

---

